## Global Snippets
# Define a new Angular Controller;
# You can change the controller name and parameters
snippet ngc
	var ${1:controllerName} = function(${2:scope}, ${3:injectables}) {
		${4}
	};
# angular.foreach loop
snippet ngfor
	angular.forEach(${1:iterateOver}, function(value, key) {
		${2}
	});
## Module Based Snippets
# A new angular module without a config function
snippet ngm
	angular.module('${1:moduleName}', [${2:moduleDependencies}]);
	${3}
# A new angular module without a config function and a variable assignment
snippet ngma
	var ${1:moduleName} = angular.module('$1', [${2:moduleDeps}]);
	${3}
# A new angular module with a config function
snippet ngmc
	var ${1:moduleName} = angular.module('$1', [${2:moduleDeps}], function(${3:configDeps}) {
		${4}
	});
# A factory in a module
snippet ngmfa
	factory('${1:factoryName}', function(${2:dependencies}) {
		${3}
	});
# Define an Angular Module Service to be attached to a previously defined module
# You can change the service name and service injectables
snippet ngms
	service('${1:serviceName}', function(${2:injectables}) {
		${3}
	});
# Define an Angular Module Filter to be attached to a previously defined module
# You can change the filter name
snippet ngmfi
	filter('${1:filterName}', function(${2:injectables}) {
		return function(input, ${3:args}) {
			${4}
		};
	});
## Route Based Snippets
# Defines a when condition of an AngularJS route
snippet ngrw
	$routeProvider.when('${1:url}', {
		templateUrl: '${2:templateUrl}',
		controller: '${3:controller}'
	});
	${4}
# Defines a when condition of an AngularJS route with the resolve block
snippet ngrwr
	$routeProvider.when('${1:url}', {
		templateUrl: '${2:templateUrl}',
		controller: '${3:controller}',
		resolve: {
			${4}
		}
	});
	${5}
# Defines an otherwise condition of an AngularJS route
snippet ngro
	$routeProvider.otherwise({
		redirectTo: '${1:url}'
	});
	${2}
## Scope Related Snippets
# Define a new $scope'd function (usually inside an AngularJS Controller)
# You can change the function name and arguments
snippet $f
	$scope.${1:functionName} = function(${2:args}) {
		${3}
	};
# Defines a new $scope'd variable inside an AngularJS controller
snippet $v
	$scope.${1:variable} = ${2:value};
	${3}
# Defines a new $scope'd variable inside an AngularJS controller and assigns a value from a constructor arguments
snippet $va
	$scope.${1:variable} = ${2:variable};
	${3}
# Define a $watch for an expression
# You can change the expression to be watched
snippet $w
	$scope.$watch('${1:watchExpr}', function(newValue, oldValue) {
		${2}
	});
# Define a $on for a $broadcast/$emit on the $scope inside an Angular Controller
# You can change the event name to listen on
snippet $on
	$scope.$on('${1:eventName}', function(event, ${2:args}) {
		${3}
	});
# Define a $broadcast for a $scope inside an Angular Controller / Angular Controller Function
# You can change the event name and optional event arguments
snippet $b
	$scope.$broadcast('${1:eventName}', ${2:eventArgs});
	${3}
# Define an $emit for a $scope inside an Angular Controller / Angular Controller Function
# You can change the event name and optional event arguments
snippet $e
	$scope.$emit('${1:eventName}', ${2:eventArgs});
	${3}
## Directive related snippets
# A compile function
snippet ngdcf
	function compile(tElement, tAttrs, transclude) {
		return function(scope, element, attrs) {
			${1}
		}
	}
# A linking function in a directive
snippet ngdlf
	function(scope, element, attrs${1:ctrl}) {
		${2}
	}
# A directive with a compile function
snippet ngdc
	directive('${1:directiveName}', function factory(${2:injectables}) {
		var directiveDefinitionObject = {
			${3:directiveAttrs},
			compile: function compile(tElement, tAttrs, transclude) {
				return function (scope, element, attrs) {

				}
			}
		};
		return directiveDefinitionObject;
	});
# A directive with a linking function only
snippet ngdl
	.directive('${1:directiveName}', function(${2:directiveDeps}) {
		return function(scope, element, attrs${3:ctrl}) {
			${4}
		}
	});
snippet app
	var ${1:varName} = angular.module("${2:appName}", [${3:dependancies}]);
snippet cont
	${1:appName}.controller("${2:controllerName}", function () {
		'use strict';
		var self = this;
		self.test = "tested";
	});
snippet route
	${1:appName}.config(['$routeProvider', function($routeProvider) {
			$routeProvider.
				when('/${2:route}', {
					templateUrl: 'partials/${3:templateName}',
					controller: '${4:controllerName}'
				}).
				otherwise({
					redirectTo: '/'
				});
			}]);
			// you need to include angular-route.min.js and put 'ngRoute' as a dependancy for your app
snippet when
	when('/${1:route}', {
		templateUrl: 'templates/views/${2:$1}',
		controller: '${3:controllerName}'
	}).
snippet c
	window.console.log( ${1} );
snippet sc
	$scope.${1:name} = ${2};
snippet scf
	$scope.${1:name} = function(${2}) {
		${3}
	};
snippet template
	<script id="${1:id}" type="text/ng-template">
	</script>
snippet llngd
	directives.directive('${1:dirName}', function() {
		return {
			scope: {},
			templateUrl: '/en/template/directive/${2}.dir.html',
			restrict: 'E',
			link: function(scope) {
				var fn = '$1';
			} // end linking
		}; // end return
	});
snippet deb
	$log.debug( "${1:id}", ${2} );
snippet v
	var ${1:text} = ${2:text};
snippet httpget
	$http({
		method: 'GET',
		url: url
	}).then(function successCallback(response) {
	}, function errorCallback(response) {
	});
snippet da
	${1:key}: '=${2:$1}',
snippet ar
	ng-repeat="${3:ref} in test.G.Access(test.uid, '${1:in}', '${2:edge}')"
snippet lltoast
	//scope.LLToast = (text, position, duration, id, icon, colourClass)
	APIService.LLToast(${1:text});
snippet filter
	app.filter('${1:name}', function() {
		return function(input) {
			${1}
		};
	});
snippet timeo
	$timeout(function(){
		${2:func}
	},${1:1000});
snippet followstate
	// this.Entity.FollowState = function (targetID, state, callback) {
snippet userindex
	// this.UserIndex = function (id, phase, predicate) {
	$scope.following = GraphService.UserIndex(${1:id}, ${2:phase}, ${3:predicate})
snippet toast
	//scope.LLToast = function (text, position, duration, id, icon, iconClass) {
	APIService.LLToast(${1:text}, ${2:null}, ${3:duration},	${4}, ${5})

snippet tiny
	case '${1:text}':
		$location.url('page');
		$location.hash(list[id]);
		break;${2}
snippet cg
	Fact( '${1:text}', '${2:text}', ${3:text}, '${4:info}');
snippet mddialogalert
	$mdDialog.show(
	$mdDialog.alert()
		.parent(angular.element(document.querySelector('#popupContainer')))
		.clickOutsideToClose(true)
		.title('This is an alert title')
		.textContent('You can specify some description text in here.')
		.ariaLabel('Alert Dialog Demo')
		.ok('Got it!')
		.targetEvent(ev)
	);
snippet mddialog
	$mdDialog.show(
		$mdDialog.alert()
			.parent(angular.element(document.querySelector(${1:elementId})))
			.clickOutsideToClose(true)
			.title(${2:title})
			.textContent("")
			.ariaLabel('Alert Dialog')
			.ok('Okay')
			.targetEvent(ev)
	);
snippet mddAdvanced
	// switch on whether to use fullscreen on all dialogs for card
	var useFullScreen = ($mdMedia('sm') || $mdMedia('xs'));
	//
	$mdDialog.show({
		controller: DialogController,
		templateUrl: 'dialog1.tmpl.html',
		parent: angular.element(document.body),
		targetEvent: ev,
		clickOutsideToClose:true,
		fullscreen: useFullScreen
	})
	.then(function(answer) {
		$scope.status = 'You said the information was "' + answer + '".';
	}, function() {
		$scope.status = 'You cancelled the dialog.';
	});
snippet functions
	// start functions

	${1}

	// end functions

snippet parent
	var parent = element.parent()[0].offsetWidth
snippet llngc
	app.controller("${1:text}", function($scope) {
		'use-strict';
		var fn = "$1";
	});
snippet llngf
	services.factory('${1:NameHere}', function($http, $q, ModuleService, APIService){
		'use strict';
		var fn = "$1";
		var url = '';
		return {
		}; // end return
	});

snippet llngs
	services.service('${1:text}', function() {
		'use-strict';
		// services return an instance of themselves
		// you can't really have private shit in here
		var fn = "$1";
		var service = {};

		return service;
	});
snippet llngfactory
	// get json data from /data/
	app.factory('${1:text}', function($http, $q){
		'use strict';
		var service = {};
		service.get = function(jsonID) {
			var url = '${2:path/to/thing/to/get}'
			var deferred = $q.defer();
			$http({
				method: 'GET',
				url: url
			}).success(function(data){
				deferred.resolve(data);
			}).error(function(){
				alert('Error getting json, rejected: '+url);
				deferred.reject("There was an error getting "+url);
			});
			return deferred.promise;

		};
		return service;
	});
	//func get() returns a promise, so to use, you have to go
	// factoryName.get('pricing').then(function(data){
	//   self.data = data;
	// })

snippet llngroute
	app.config(['$routeProvider', function($routeProvider) {
			$routeProvider.

				// proposal section
				when('/welcome', {
					templateUrl: 'proposal-welcome.html',
					controller: 'proposalCtrl'
				}).

				otherwise({
					redirectTo: '/'
				});
	}]);

snippet dsm
	ds.OpenDemoModal(null, ${1:text});

snippet closeAnswer
	self.close = function() {
		$mdDialog.cancel();
	};

	self.answer = function(answer) {
		$mdDialog.hide(answer);
	};
snippet open
	GraphService.Open(${1:id}, ${2:fn}, function(){
		GraphService.Get(${3:id}, function(data){
			// do stuff with data
		});
	});
snippet prom
	var deferred = $q.defer();
	// get stuff then...
	deferred.resolve(data);
	// error shit
	deferred.reject("error message", data);
	// then
	return deferred.promise;
snippet navigate
	NavigateService.navigate(${1:url}, ${2:route}, ${3:hash}, ${4:query}, ${5:newWindowBool});
snippet pro
	"${1}" : "${2}",
snippet $http
	var url = '';
	//
	$http({
		method: 'GET',
		url: url
	}).then(function successCallback(res) {
	}, function errorCallback(res) {
	});
snippet previewShort
	previewService.preview(${1:event calling this dialog}, '${2:id of container}', '${3:text to add to the dialog}');
snippet arr
	$scope.${1} = [];
snippet previewLong
	var parent = '#main-view';
	var text = 'This will favourite the business for you, animate and change the color of the heart';
	previewService.preview(ev, parent, text);
snippet $watch
	$scope.$watch(function(){
		return ${1}
	}, function(data){
		${2}
		// do a thing with the data
	})
snippet into
	InteractionOverlay.open({
		event: ev,
		controller: '${1}OverlayCtrl',
		object: {scope: $scope, menu: ${2:true}},
		finish: function(){
		},
		cancel: function(){
		}
	});
snippet uploaderConfig
	var uploaderConfig = {
		success: function(response){
			window.console.log('Successfully uploaded image: ', response );
		},
		fail: function(response){
		},
		queueLimit: 1,
		entityType: 'company',
		entityId: 'DPp3qS4_T7KVGft37xefhbYwCUbwZ8',
		mode: 'logo',
		autoUpload: true
	};
snippet entav
	<entity-avatar entitytype='${1}' mode='${2}' entity-id='${3}' editable='false'></entity-avatar>
snippet uid
	APIService.UserID()
# in function
snippet inf
	function(data){
		window.console.log('Got ${1}', data );
		if(success){success(data);}
	}${2}
snippet ine
	function(data){
		window.console.error('Could not get ${1}', data);
		if(fail){fail(data);}
	}
snippet image
	'https://media.leadinglocally.com/api/image/'+${1:id}+'/large';
snippet cc
	NavigationService.Location.Country().Code
snippet languageCode
	var languageCode = $scope.languageCode = LanguageService.language.toLowerCase();
snippet lc
	LanguageService.language.toLowerCase();
snippet countryCode
	var countryCode = $scope.countryCode = NavigationService.Location.Country().Code;
snippet lc
	LanguageService.language;
snippet mfuncs
	function(data){
		window.console.log('Got ${1:thing}: ', data );
	}, function(){
		window.console.error('Could not get ${2:$1}', fn);
	});
snippet async
	// this is just a reminder
	// predict a bunch of tags at the same time
	this.asyncPredict = function(input) {
		var deferred = $q.defer();
		var functionCalls = [
			this.predictNormalTags(input),
			this.predictProductTags(input),
			this.predictBrandTags(input),
			this.predictTrademarkTags(input),
			// this.predictWantedTags(input)
		];
		$q.all(functionCalls)
		.then(
			function(results){
				deferred.resolve(results);
			},
			function(errors){
				deferred.reject(errors);
			},
			function(updates){
				deferred.update(updates);
			}
		);
		return deferred.promise;
	};
snippet intb
	var buttons = [];
	// pass menuConfig to the object when calling this template
	// menuConfig.buttons :
	function MenuButtonsFact(display, icon, active, clickFunc) {
		var obj = {};
		obj.display = display;
		obj.icon = icon;
		obj.active = active;
		obj.clickFunc = clickFunc;
		buttons.push(obj);
	}

	// the factories must be written with inline functions or they won't work

	new MenuButtonsFact('Add accreditation', 'add', false, function(){
	});
	new MenuButtonsFact('Upload accreditation spreadsheet', 'cloud_upload', false, function(){
	});

	menuConfig = { buttons: buttons };

	InteractionOverlay.open({
		event: ev,
		template: '/en/template/overlay/menu.tpl.html',
		controller: 'MenuOverlayCtrl',
		object: { menuConfig: menuConfig },
		finish: function(){
		},
		cancel: function(){
		}
	});
snippet bu
	new MenuButtonsFact('Add ${1}', '${2:edit}', false, function(){
	});
snippet dou
	var ${1:var} = $scope.$1 = $2
snippet Dou
	var ${1:var} = scope.$1 = $2
snippet imageUpload
	set: function(ev, businessId, success, fail){
	// pass the id and success & fail function callbacks into the calling function in the factory
	// change the values

		var uploaderConfig = {
			success: function(data){
				InteractionOverlay.hide();
				if(success){success(data);}
			},
			fail: function(data){
				if(fail){fail(data);}
			},
			queueLimit: 1,
			entityType: 'business',
			entityId: businessId,
			mode: background,
			autoUpload: true
		};

		InteractionOverlay.open({
			event: ev,
			template: '/en/template/overlay/images/base.tpl.html',
			controller: 'ImagesOverlayCtrl',
			object: { uploaderConfig: uploaderConfig },
			finish: function(){
				getImage();
			},
			cancel: function(){

			}
		});

	},
snippet suc
	.success(function(data){
	});
snippet damn
	.error(function(data){
		${1}
	})
snippet retg
	return $http.get(url, APIService.tokenHeaders())
		.success(function(data){
			window.console.log('got ${1:thing}: ', data, fn );
		})
		.error(function(data){
			window.console.error('could not get $1: ', data, fn );
		});
snippet retp
	return $http.post(url, data, APIService.tokenHeaders())
		.success(function(data){
			window.console.log('${1:thing}: ', data, fn );
		})
		.error(function(data){
			window.console.error('Could not $1', data, fn );
		});
snippet fac
	${1}: {
		get: function(){
		},
	},${2}
snippet pan
	${1}: {
		get: function(){
			points = [];
			return buildConfig();
		},
	},${2}
snippet hp
	$scope.${1:type}Help = HelpFact.admin.brand.$1.get();
snippet sha
	$scope.${1}Help.active = true;
snippet cla
	export class ${1}{
		${1}
	}
snippet configCheck
	if(!scope.config){
		window.console.warn('loaded without config: ', fn, 'got: ', scope.config );
	}else{
		window.console.log('loaded with config: ', scope.config, fn );
	}
snippet obf
	${1:key}: function() {
		return true;
	}, // $1${2}
snippet obo
	${1:key}: {
	}, // $1${2}
snippet t
	return true;
snippet dis
	ng-if="DisableFact.admin.brands.${1}"
snippet lead
	url = 'https://${1:entity}.leadinglocally.com/api/${2}';
snippet dd
	${1:thing} = $scope.$1 = ${2}
snippet imageurl
	'https://media.leadinglocally.com/api/image/'+${1:id}+'/'+size;
snippet hel
	case '${1:section}':
		$scope.$1Help.active = true;
		break;${2}
snippet hep
	$scope.${1:id}Help = HelpFact.admin.user.${2}.$1.get();
snippet section
	//
	// SECTION ${1}
	//
snippet but
	{
		display: '${1}',
		icon: '${2}',
		active: ${3:false},
		clickFunc: function(){
		${4}},
		menuArray: [${5}],
	},${6}
snippet back
	{
		display: '',
		icon: 'chevron_left',
		active: true,
		clickFunc: function(){
			InteractionOverlay.close();
		},
		menuArray: [],
	},
snippet template
	$scope.templateUrl = templateBase + '${1}.tpl.html';
snippet match
	var ${1:var} = $scope.$1 = object.scope.$1;
snippet overlay
	app.controller("${1:function}OverlayCtrl", function($scope, InteractionOverlay, object, $mdDialog, BrandFact, BusinessFact, UserFact) {
		'use-strict';
		var fn = "$1OverlayCtrl";
		var x;

		$scope.InteractionOverlay = InteractionOverlay;
		$scope.templateUrl = object.menu ? '/en/template/component/overlay/templates/menu.tpl.html' : config.template;

		var templateBase = '/en/template/overlay/admin/contact/';
		//
		var changeTemplate = $scope.changeTemplate = function(template) {
			console.log('Changing overlay template to: ', template);
			$scope.templateUrl = templateBase + template+'.tpl.html';
		};

		var entityType = $scope.entityType = object.scope.entityType;
		var entityId = $scope.entityId = object.scope.entityId;
		var countryCode = $scope.countryCode = object.scope.countryCode;
		var name = $scope.name = object.scope.name;
		var entityCountryCode = $scope.entityCountryCode = entityType === 'brand' ? 'GLB' : object.scope.entityCountryCode;
		$scope.confirmText = '';
		$scope.pageState = 'ready';
		// dev
		// $scope.templateUrl = templateBase + 'website.tpl.html';

		// build the menu array object and save it in the service

		var menuArray = [
		];

		// set the overlay menu to this configuration
		InteractionOverlay.menuButtons = menuArray;

		// cancel loads the menu view which will have the previous configuration.
		$scope.cancel = function(close) {
			if(!close){
				$scope.templateUrl = '/en/template/component/overlay/templates/menu.tpl.html';
			}else{
				InteractionOverlay.close();
			}
		};

		$scope.close = function() {
			InteractionOverlay.close();
		};

	});
