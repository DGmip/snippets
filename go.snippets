# shorthand variable declaration
snippet v
	${1} := ${2}
# variable initialization
snippet vr
	var ${1:t} ${0:string}
# variable declaration
snippet var
	var ${1} ${2} = ${3}
# variables declaration
snippet vars
	var (
		${1} ${2} = ${3}
	)
# append
snippet ap
	append(${1:slice}, ${0:value})
# bool
snippet bl
	bool
# byte
snippet bt
	byte
# break
snippet br
	break
# channel
snippet ch
	chan ${0:int}
# case
snippet cs
	case ${1:value}:
		${0}
# const
snippet c
	const ${1:NAME} = ${0:0}

# constants with iota
snippet co
	const (
		${1:NAME1} = iota
		${0:NAME2}
	)
# continue
snippet cn
	continue
# defer
snippet df
	defer ${0:func}()
# defer recover
snippet dfr
	defer func() {
		if err := recover(); err != nil {
			${0}
		}
	}()
# gpl
snippet gpl
	/*
	 * This program is free software; you can redistribute it and/or modify
	 * it under the terms of the GNU General Public License as published by
	 * the Free Software Foundation; either version 2 of the License, or
	 * (at your option) any later version.
	 *
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 * GNU General Public License for more details.
	 *
	 * You should have received a copy of the GNU General Public License
	 * along with this program; if not, see <http://www.gnu.org/licenses/>.
	 *
	 * Copyright (C) ${1:Author}, `strftime("%Y")`
	 */

	${0}
# int
snippet i
	int
# import normal package
snippet im
	import (
		"fmt"
		"${1:package}"
	)
# import toolkit package
snippet imt
	import (
		"fmt"
		"github.com/dgmip/toolkit/${1:package}"
	)
# interface
snippet in
	interface{}
# full interface snippet
snippet inf
	interface ${1:name} {
		${2:/* methods */}
	}
# if condition
snippet if
	if ${1:/* condition */} {
		${2}
	}
# else snippet
snippet el
	else {
		${1}
	}
# error snippet
snippet ir
	if err != nil {
		return err
	}
	${0}
# false
snippet f
	false
# fallthrough
snippet ft
	fallthrough
# float
snippet fl
	float32
# float32
snippet f3
	float32
# float64
snippet f6
	float64
# if else
snippet ie
	if ${1:/* condition */} {
		${2}
	} else {
		${3}
	}
	${0}
# for loop
snippet fo
	for ${2:i} := 0; $2 < ${1:count}; $2${3:++} {
	}
	${0}
# for range loop
snippet fr
	for ${1:k}, ${2:v} := range ${3} {
		${4}
	}
	${0}
# function simple
snippet fun
	func ${1:funcName}(${2}) ${3:error} {
		${4}
	}
	${0}
# function on receiver
snippet fum
	func (${1:receiver} ${2:type}) ${3:funcName}(${4}) ${5:error} {
		${6}
	}
	${0}
# log printf
snippet lf
	log.Printf("%${1:s}", ${2:var})
# log printf
snippet lp
	log.Println("${1}")
snippet pl
	fmt.Println(${1})
# make
snippet mk
	make(${1:[]string}, ${0:0})
# map
snippet mp
	map[${1:string}]${0:int}
# main()
snippet main
	func main() {
		${1}
	}
	${0}
# new
snippet nw
	new(${0:type})
# package
snippet pa
	package ${1:main}
# panic
snippet pn
	panic("${0:msg}")
# print
snippet pr
	f := "${1:formatting}"
	fmt.Printf(f, ${2})
# range
snippet rn
	range ${0}
# return
snippet rt
	return ${0}
# result
snippet rs
	result
# select
snippet sl
	select {
	case ${1:v1} := <-${2:chan1}
		${3}
	case ${4:v2} := <-${5:chan2}
		${6}
	default:
		${0}
	}
# string
snippet sr
	string
# struct
snippet st
	struct ${1:name} {
		${2:/* data */}
	}
	${0}
# switch
snippet sw
	switch ${1:var} {
	case ${2:value1}:
		${3}
	case ${4:value2}:
		${5}
	default:
		${0}
	}
snippet sp
	fmt.Sprintf("%${1:s}", ${2:var})
# true
snippet t
	true
# goroutine named function
snippet g
	go ${1:funcName}(${0})
# goroutine anonymous function
snippet ga
	go func(${1} ${2:type}) {
		${3:/* code */}
	}(${0})
snippet test test function
	func Test${1:name}(t *testing.T) {
		${2}
	}
	${0}
snippet bench benchmark function
	func Benchmark${1:name}(b *testing.B) {
		for i := 0; i < b.N; i++ {
			${2}
		}
	}
	${0}
# start ben stuff
snippet my
	"github.com/dgmip/${1}"

snippet err
	if err != nil {
		${1:text}
	}
snippet go
	package ${1:main}

	import (
		"${1:fmt}"
	)

	const (
	)
snippet cr
	// --comment request --  ${1:text}
snippet cd
	// --comment request --  describe the file
snippet httprouter
	github.com/julienschmidt/httprouter
snippet range
	for ${1:_}, ${2:x} := range ${3:x}{
	}${4:}
snippet handler
	func ${1:handlerName}Handler(w http.ResponseWriter, r *http.Request){
	}
snippet hf
	http.HandleFunc("/${1:route}/", $1${2:Handler})
snippet fp
	fmt.Fprintf(w, "${1:formatter}", ${2:variables})
snippet redirect
	http.Redirect(w, r, ${1:location}, http.StatusFound)
snippet fprint
	fmt.Fprint(w, ${1:var})
snippet template
	var ${1:var}Template = template.Must(template.New("${2:$1}").Parse(${3:file}))
snippet bra
	"${1:text}": []string{"${2:text}","${3:text}","${4:text}"},
snippet '
	&#39;
# gaml start
snippet col
	ng.COL()${2}
snippet col.
	ng.COL().Class("${1}")${2}
snippet col.a
	ng.COL().Class("${1}").Align("${2:start}", "${3:center}")${4}
snippet row
	ng.ROW()${2}
snippet row.
	ng.ROW().Class("${1}")${2}
snippet ngb
	ng.B().Inner("${1}")
snippet ngd
	ng.DIRECTIVE("${1}")${2}
snippet divi
	ng.DIVIDER(${1:16}),${2}
snippet div
	ng.DIV()${1}
snippet div.
	ng.DIV().Class("${1}")${2}
snippet ngcla
	.NgClass("${1}")${2}
snippet but
	ng.BUTTON()${1}
snippet but.
	ng.BUTTON().Class("${1}")${2}
snippet mdib
	ng.BUTTON().Class("md-icon-button")${1}
snippet arlab
	.AriaLabel("${1}")${2}
snippet span
	ng.SPAN()${1}
snippet spani
	ng.SPAN().Inner("${1}"),${2}
snippet spant
	ng.SPAN().Interpolate("${1}")${2}
snippet span.
	ng.SPAN().Class("${1}").Inner("${2}"),
snippet mdinp
	ng.INPUT("${1:label}", "${2:model}")
snippet input
	ng.NORMALINPUT("${1:type}", "${2:placeholder}", "${3:model}")${4}
snippet mdsidenav
	ng.SIDENAV("${1:md-component-id}")${2}
snippet layout
	.Layout("${1:row}")${2}
snippet mdtoolbar
	ng.TOOLBAR()${1}
snippet mdcontent
	ng.CONTENT().Add(${1}), // md-content end
snippet mdsel
	ng.MDSELECT("${1:model}", "${2:placeholder}")${3}
snippet mdopt
	ng.MDOPTION("${1:value}")${2}
snippet pre
	ng.PRE("${1}")${2}
snippet ngp
	ng.P()${1}
snippet ngp.
	ng.P().Class("${1}")${2}
snippet mdprogc
	ng.MDPROGRESSCIRCULAR("${1:indeterminate}", "${2:value}")
snippet ngh
	ng.H(${1})
snippet ngh.
	ng.H(${1}).Class("${2}")
snippet nga
	ng.A().Attr("href", "${1:href}")${2}
snippet ngli
	ng.LI()${1}
snippet nglia
	ng.LI().Layout("row").Align("start center")${1}
snippet ngol
	ng.OL()${1}
snippet ngul
	ng.UL()${1}
snippet ngf
	ng.FORM("${1:fuck-knows}")
snippet ico
	ng.ICONS("${1:icon}"),${2}
snippet icor
	ng.ICONS("${1:icon}")RAttr("${2:size}", "${3}")${4}
snippet ico.
	ng.ICONS("${1:icon}").Class("${2}")${3}
snippet ngtt
	ng.TOOLTIP("${1:text}")${2}
snippet bre
	ng.BR(),${1}
snippet mdtabs
	ng.MDTABS()${1}
snippet tab
	ng.MDTAB("${1:label}")${2}
snippet inlinestyles
	ng.INLINESTYLES("${1}")${2}
snippet id
	.Id("${1}")${2}
snippet cla
	.Class("${1}")${2}
snippet nam
	.Name("${1}")${2}
snippet dev
	Dev_Info("${1}"),
snippet ngc
	.Controller("${1}")${2}
snippet fle
	.Flex(${1:-1})${2}
snippet ini
	.Init("${1}")${2}
snippet ali
	.Align("${1:start} ${2:center}")${3}
snippet add
	.Add(${1}),
snippet addc
	.Add(${2}), // ${1} end
snippet sty
	.Style("${1}", "${2}")${3}
snippet ngsty
	.NgStyle("${1}")${2}
snippet ngbg
	.BackgroundImage("${1}")${2}
snippet cli
	.NgClick("${1}")${2}
snippet inn
	.Inner("${1}")${2}
snippet int
	.Interpolate("${1}")${2}
snippet att
	.Attr("${1}")${2}
snippet rat
	.RAttr("${1}", "${2}")${3}
snippet attr
	.Attr("${1}", "${2}")${3}
snippet ngmod
	.NgModel("${1}")${2}
snippet ngent
	.NgEnter("${1}")${2}
snippet ngkey
	.NgKeyup("${1}")${2}
snippet ngblu
	.NgBlur("${1}")${2}
snippet ngfoc
	.NgFocus("${1}")${2}
snippet dirs
	.AttrDirs("${1}", "${2}"${3})${4}
snippet if
	.NgIf("${1}")${2}
snippet ngr
	.NgRepeat("${1}")${2}
snippet ngsh
	.NgShow("${1}")${2}
snippet ngimports
	"github.com/leadinglocally/microservices/ng/core"
	"github.com/leadinglocally/microservices/ng/components"
snippet devtit
	ng.SPAN().Add(
		ng.B().Inner("${1:shit}"),
	),
	ng.SPAN().Interpolate("${2:$1}"),
snippet ipsum
	Plaid flannel thundercats, magna photo booth banjo sartorial godard tilde. Ut PBR&B qui 8-bit, nostrud delectus four dollar toast cardigan nesciunt mixtape. Nostrud put a bird on it synth drinking vinegar. Mumblecore delectus chicharrones, bicycle rights church-key before they sold out portland cillum aesthetic placeat. Portland banjo aliquip lo-fi ethical. Biodiesel neutra brunch fixie meditation. Sed anim cray, yuccie viral velit enim tilde trust fund typewriter kogi.
snippet shortip
	Plaid flannel thundercats, magna photo booth banjo sartorial godard tilde.
snippet sect
	ng.COL().Id("${1}").Class("${2:section}").Align("${3:center} ${4:center}").NgStyle("sectionStyle").Attr("layout-fill")${5}
snippet ngprevt
	components.NgPreviewTag("${1:display}", "${2:tagtype}", ${3:endorsements int}),
snippet ngloct
	components.NgLocationTag("${1:location display name}", "${2:flag code}")
# gaml end
# end ben stuff
